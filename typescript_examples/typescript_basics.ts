// BASIC TYPES
let a: number = 5;
let b: string = '4';

let c: number = a + Number(b);

let d: boolean = true;

let names: string[] = ['james', 'kevin'];
let ages: number[] = [5, 2];

let tuples: [number, string] = [1, 'hello'];

let random: any = 3;
random = 'hello';
random = true;

let anyArray: any[] = ['bla', 1, false];

function greet(name: string): string {
    return `Hi ${name}`;
}

names.map((n: string): string => {
    return greet(n);
});

function coord(coord: { lat: number, long?: number }): string {
    return `latitude: ${coord.lat}`;
}

let result: string = coord({ lat: 60, long: 70 });

// UNION TYPES
let universalId: number | string = 5;
universalId = 'id';

type UNIQUE_ID = number | string; // alias to union type

function printId(id: UNIQUE_ID) {
    if (typeof id === 'string') {
        console.log(id.toUpperCase());
    } else {
        console.log(id);
    }
}

function helloUser(user: string | string[]) {
    if (typeof user === 'string') {
        console.log(`Hello ${user}`);
    } else {
        user.map((u: string) => {
            console.log(`Hello ${u}`);
        });
    }
}

helloUser('James');
helloUser(['James', 'Kevin']);

// INTERFACES and TYPES

// describes object and it's types
type coord = {
    lat: number,
    long: number,
};

// describes object props
interface ICoord {
    lat: number;
    long: number;
}

function compute(coord: ICoord) {}

// interface inheritance
interface Animal {
    name: string;
}

interface Dog extends Animal {
    tail?: boolean; // optional prop
}

// merging interface, not available for types
interface Dog {
    bark: string;
}

const dog: Dog = {
    name: 'Pluto',
    bark: 'quiet',
};

console.log(dog.name);

// type implementation
type Mammal = {
    name: string,
};

type Cat = Animal & {
    tail?: boolean,
};

const cat: Cat = {
    name: 'Amber',
};

// LITERAL TYPES
const constant = 'hello';

let greeting: 'hi' = 'hi';

type direction = 'left' | 'right';

function moveDog(direction: direction): -1 | 0 | 1 {
    switch (direction) {
        case 'left':
            return -1;
        case 'right':
            return 1;
        default:
            return 0;
    }
}

interface IConnection {
    host: string;
    port: number;
}

function connect(connection: IConnection | 'default') {}

// CASTNG Types
const connection = {
    host: 'localhost',
    protocol: 'https' as 'https' // casting string to sting literal
};

function makeConnection(host: string, protocol: 'https' | 'http') {}

makeConnection(connection.host, connection.protocol);

let any: any = 5;
let cast = <number>any; // not valid in JSX
let casted = any as number;

// ENUMS
enum Direction {
    Left = 'left',
    Right = 'right'
} // object in runtime generated by the function

const enum Direction2 {
    Up,
    Down
}
const myDirection = Direction2.Up; // constant object in runtime

function move(direction: Direction) : -1 | 0 | 1 {
    switch (direction) {
        case Direction.Left:
            return -1;
        case Direction.Right:
            return 1;
        default:
            return 0;
    }
}

